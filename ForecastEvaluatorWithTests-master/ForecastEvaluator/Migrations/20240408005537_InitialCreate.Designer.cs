// <auto-generated />
using System;
using ForecastEvaluator.DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForecastEvaluator.Migrations
{
    [DbContext(typeof(ForecastContext))]
    [Migration("20240408005537_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForecastEvaluator.DataModels.AnemometerReading", b =>
                {
                    b.Property<int>("ReadingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReadingID"));

                    b.Property<TimeOnly>("Hour")
                        .HasColumnType("time");

                    b.Property<DateOnly>("ReadingDate")
                        .HasColumnType("date");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<decimal>("WindGusts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReadingID");

                    b.ToTable("AnemometerReadings");
                });

            modelBuilder.Entity("ForecastEvaluator.DataModels.ForecastDetail", b =>
                {
                    b.Property<int>("HourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HourID"));

                    b.Property<int>("ForecastID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Hour")
                        .HasColumnType("time");

                    b.Property<int>("WeatherForecastForecastID")
                        .HasColumnType("int");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<decimal>("WindGusts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HourID");

                    b.HasIndex("WeatherForecastForecastID");

                    b.ToTable("ForecastsDetails");
                });

            modelBuilder.Entity("ForecastEvaluator.DataModels.WeatherForecast", b =>
                {
                    b.Property<int>("ForecastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForecastID"));

                    b.Property<DateOnly>("ForecastForDate")
                        .HasColumnType("date");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RetrievalDate")
                        .HasColumnType("date");

                    b.HasKey("ForecastID");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("ForecastEvaluator.DataModels.ForecastDetail", b =>
                {
                    b.HasOne("ForecastEvaluator.DataModels.WeatherForecast", "WeatherForecast")
                        .WithMany("ForecastDetail")
                        .HasForeignKey("WeatherForecastForecastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("ForecastEvaluator.DataModels.WeatherForecast", b =>
                {
                    b.Navigation("ForecastDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
